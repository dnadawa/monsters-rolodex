{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monstor","id","alt","name","email","CardList","map","key","SearchBox","placeholder","handleEvent","type","onChange","App","handlechange","e","setState","search","target","value","state","fetch","then","response","json","users","monsters","this","filtered_monsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAGaA,G,kBAAO,SAAAC,GAEhB,OACA,yBAAKC,UAAU,kBACX,yBAAKC,IAAK,wBAAwBF,EAAMG,QAAQC,GAAG,yBAA0BC,IAAK,YAClF,4BAAKL,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,UCLbC,EAAW,SAAAR,GACpB,OACI,yBAAKC,UAAU,aACXD,EAAMG,QAAQM,KAAI,SAAAN,GAAO,OAAI,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCJ5DQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,YAAd,OACrB,2BAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC6CjEG,E,YAzCX,aAAe,IAAD,8BACV,+CAcJC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAACC,OAAOF,EAAEG,OAAOC,SAb/B,EAAKC,MAAQ,CACTpB,QAAQ,GACRiB,OAAO,IALD,E,iFASO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAChB,QAAQyB,S,+BAU1C,IAAMC,EAAWC,KAAKP,MAAMpB,QACtBiB,EAASU,KAAKP,MAAMH,OAEpBW,EAAoBF,EAASG,QAAO,SAAAH,GAAQ,OAAIA,EAASvB,KAAK2B,cAAcC,SAASd,EAAOa,kBAElG,OAAQ,yBAAKhC,UAAU,OACnB,4BAAQA,UAAU,cACd,gDACA,kBAAC,EAAD,CAAWW,YAAY,kBAAkBC,YAAaiB,KAAKb,eAE3D,kBAAC,EAAD,CAAUd,QAAS4B,U,GAlCjBI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.3f095a55.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.style.css';\r\n\r\nexport const Card = props => {\r\n\r\n    return(\r\n    <div className='card-container'>\r\n        <img src={'https://robohash.org/'+props.monstor.id+'?set=set2&size=180x180'} alt={'monster'}/>\r\n        <h2>{props.monstor.name}</h2>\r\n        <p>{props.monstor.email}</p>\r\n    </div>\r\n    );\r\n}","import React from \"react\";\r\nimport './card-list.stylle.css'\r\nimport {Card} from \"../card/card.component\";\r\n\r\nexport const CardList = props => {\r\n    return(\r\n        <div className='card-list'>{\r\n            props.monstor.map(monstor => <Card key={monstor.id} monstor={monstor}/>)\r\n        }</div>\r\n    );\r\n\r\n};","import React from \"react\";\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder,handleEvent}) => (\r\n    <input className='search' type='search' placeholder={placeholder} onChange={handleEvent}/>\r\n);","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\n\nclass App extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            monstor:[],\n            search:''\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response =>response.json())\n            .then(users => this.setState({monstor:users}));\n    }\n\n    handlechange = e =>{\n        this.setState({search:e.target.value});\n    };\n\n\n    render() {\n\n        const monsters = this.state.monstor;\n        const search = this.state.search;\n\n        const filtered_monsters = monsters.filter(monsters => monsters.name.toLowerCase().includes(search.toLowerCase()));\n\n        return (<div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Monsters Rolodex</h1>\n                <SearchBox placeholder='Search Monsters' handleEvent={this.handlechange}/>\n\n                <CardList monstor={filtered_monsters}/>\n\n            </header>\n        </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}